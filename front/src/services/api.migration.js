/**
 * Arquivo de Migra√ß√£o - EndiAgro FinancePro
 * 
 * Este arquivo facilita a migra√ß√£o gradual dos servi√ßos antigos
 * para os novos servi√ßos unificados.
 * 
 * @author Antonio Emiliano Barros
 * @version 1.0.0
 */

// Importa os novos servi√ßos unificados
import { httpService } from './httpService.unified';
import { authService } from './authService.unified';
import { API_ENDPOINTS } from '../config/api.config.unified';

/**
 * API de Or√ßamentos - Vers√£o Unificada
 * Mant√©m compatibilidade com a interface antiga
 */
const orcamentoApi = {
  /**
   * Lista todos os or√ßamentos com filtros e pagina√ß√£o
   */
  async listarOrcamentos(params = {}) {
    try {
      console.log('üîÑ [MIGRATED] Listando or√ßamentos...');
      const response = await httpService.get(API_ENDPOINTS.ORCAMENTOS.LIST, params);
      
      // Garante compatibilidade com estrutura esperada
      if (response.status === 'success' && response.data) {
        return response;
      } else if (response.orcamentos) {
        // Estrutura alternativa
        return {
          status: 'success',
          data: {
            orcamentos: response.orcamentos,
            pagination: response.pagination || {}
          }
        };
      }
      
      return response;
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao listar or√ßamentos:', error);
      throw error;
    }
  },

  /**
   * Obt√©m um or√ßamento espec√≠fico por ID
   */
  async obterOrcamento(id) {
    try {
      console.log(`üîÑ [MIGRATED] Obtendo or√ßamento ${id}...`);
      const endpoint = API_ENDPOINTS.ORCAMENTOS.GET.replace(':id', id);
      return await httpService.get(endpoint);
    } catch (error) {
      console.error(`‚ùå [MIGRATED] Erro ao obter or√ßamento ${id}:`, error);
      throw error;
    }
  },

  /**
   * Cria um novo or√ßamento
   */
  async criarOrcamento(dadosOrcamento) {
    try {
      console.log('üîÑ [MIGRATED] Criando or√ßamento...');
      return await httpService.post(API_ENDPOINTS.ORCAMENTOS.CREATE, dadosOrcamento);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao criar or√ßamento:', error);
      throw error;
    }
  },

  /**
   * Cria um or√ßamento completo
   */
  async criarOrcamentoCompleto(dadosFormulario) {
    try {
      console.log('üîÑ [MIGRATED] Criando or√ßamento completo...');
      return await httpService.post(API_ENDPOINTS.ORCAMENTOS.COMPLETE, dadosFormulario);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao criar or√ßamento completo:', error);
      throw error;
    }
  },

  /**
   * Atualiza um or√ßamento existente
   */
  async atualizarOrcamento(id, dadosOrcamento) {
    try {
      console.log(`üîÑ [MIGRATED] Atualizando or√ßamento ${id}...`);
      const endpoint = API_ENDPOINTS.ORCAMENTOS.UPDATE.replace(':id', id);
      return await httpService.patch(endpoint, dadosOrcamento);
    } catch (error) {
      console.error(`‚ùå [MIGRATED] Erro ao atualizar or√ßamento ${id}:`, error);
      throw error;
    }
  },

  /**
   * Exclui um or√ßamento
   */
  async excluirOrcamento(id) {
    try {
      console.log(`üîÑ [MIGRATED] Excluindo or√ßamento ${id}...`);
      const endpoint = API_ENDPOINTS.ORCAMENTOS.DELETE.replace(':id', id);
      return await httpService.delete(endpoint);
    } catch (error) {
      console.error(`‚ùå [MIGRATED] Erro ao excluir or√ßamento ${id}:`, error);
      throw error;
    }
  },

  /**
   * Aprova um or√ßamento
   */
  async aprovarOrcamento(id, observacoes = '') {
    try {
      console.log(`üîÑ [MIGRATED] Aprovando or√ßamento ${id}...`);
      const endpoint = API_ENDPOINTS.ORCAMENTOS.APPROVE.replace(':id', id);
      return await httpService.patch(endpoint, { observacoes });
    } catch (error) {
      console.error(`‚ùå [MIGRATED] Erro ao aprovar or√ßamento ${id}:`, error);
      throw error;
    }
  },

  /**
   * Rejeita um or√ßamento
   */
  async rejeitarOrcamento(id, motivo) {
    try {
      console.log(`üîÑ [MIGRATED] Rejeitando or√ßamento ${id}...`);
      const endpoint = API_ENDPOINTS.ORCAMENTOS.REJECT.replace(':id', id);
      return await httpService.patch(endpoint, { motivo });
    } catch (error) {
      console.error(`‚ùå [MIGRATED] Erro ao rejeitar or√ßamento ${id}:`, error);
      throw error;
    }
  },

  /**
   * Obt√©m estat√≠sticas dos or√ßamentos
   */
  async obterEstatisticas(filtros = {}) {
    try {
      console.log('üîÑ [MIGRATED] Obtendo estat√≠sticas...');
      return await httpService.get(API_ENDPOINTS.ORCAMENTOS.STATS, filtros);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao obter estat√≠sticas:', error);
      throw error;
    }
  },

  /**
   * Obt√©m o or√ßamento aprovado para um ano espec√≠fico
   */
  async obterOrcamentoAprovado(params = {}) {
    try {
      console.log('üîÑ [MIGRATED] Obtendo or√ßamento aprovado...');
      return await httpService.get(API_ENDPOINTS.ORCAMENTOS.APPROVED, params);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao obter or√ßamento aprovado:', error);
      throw error;
    }
  }
};

/**
 * API de Tesouraria - Vers√£o Unificada
 */
const tesourariaApi = {
  /**
   * Lista os planos de tesouraria
   */
  async listarPlanos(params = {}) {
    try {
      console.log('üîÑ [MIGRATED] Listando planos de tesouraria...');
      return await httpService.get(API_ENDPOINTS.TESOURARIA.PLANOS, params);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao listar planos:', error);
      throw error;
    }
  },

  /**
   * Cria um novo plano de tesouraria
   */
  async criarPlano(dadosPlano) {
    try {
      console.log('üîÑ [MIGRATED] Criando plano de tesouraria...');
      return await httpService.post(API_ENDPOINTS.TESOURARIA.PLANOS, dadosPlano);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao criar plano:', error);
      throw error;
    }
  },

  /**
   * Obt√©m um plano espec√≠fico
   */
  async obterPlano(id) {
    try {
      console.log(`üîÑ [MIGRATED] Obtendo plano ${id}...`);
      const endpoint = API_ENDPOINTS.TESOURARIA.PLANO.replace(':id', id);
      return await httpService.get(endpoint);
    } catch (error) {
      console.error(`‚ùå [MIGRATED] Erro ao obter plano ${id}:`, error);
      throw error;
    }
  },

  /**
   * Obt√©m o fluxo de caixa
   */
  async obterFluxoCaixa(filtros = {}) {
    try {
      console.log('üîÑ [MIGRATED] Obtendo fluxo de caixa...');
      return await httpService.get(API_ENDPOINTS.TESOURARIA.FLUXO_CAIXA, filtros);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao obter fluxo de caixa:', error);
      throw error;
    }
  },

  /**
   * Obt√©m atividades recentes
   */
  async obterAtividadesRecentes(params = {}) {
    try {
      console.log('üîÑ [MIGRATED] Obtendo atividades recentes...');
      return await httpService.get(API_ENDPOINTS.TESOURARIA.ATIVIDADES, params);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao obter atividades recentes:', error);
      throw error;
    }
  }
};

/**
 * API de Autentica√ß√£o - Vers√£o Unificada
 */
const authApi = {
  /**
   * Realiza login do usu√°rio
   */
  async login(credentials) {
    try {
      console.log('üîÑ [MIGRATED] Fazendo login...');
      return await authService.login(credentials.email, credentials.password);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro no login:', error);
      throw error;
    }
  },

  /**
   * Registra um novo usu√°rio
   */
  async register(userData) {
    try {
      console.log('üîÑ [MIGRATED] Registrando usu√°rio...');
      return await authService.register(userData);
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro no registro:', error);
      throw error;
    }
  },

  /**
   * Obt√©m dados do usu√°rio atual
   */
  async getMe() {
    try {
      console.log('üîÑ [MIGRATED] Obtendo dados do usu√°rio...');
      return await authService.getCurrentUser();
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro ao obter dados do usu√°rio:', error);
      throw error;
    }
  },

  /**
   * Realiza logout
   */
  async logout() {
    try {
      console.log('üîÑ [MIGRATED] Fazendo logout...');
      return await authService.logout();
    } catch (error) {
      console.error('‚ùå [MIGRATED] Erro no logout:', error);
      throw error;
    }
  },

  /**
   * Verifica se est√° autenticado
   */
  isAuthenticated() {
    return authService.isAuthenticated();
  },

  /**
   * Obt√©m dados do usu√°rio
   */
  getUser() {
    return authService.getUser();
  }
};

// Exporta as APIs migradas
export {
  orcamentoApi,
  tesourariaApi,
  authApi
};

// Exporta tamb√©m os servi√ßos unificados para uso direto
export {
  httpService,
  authService
};

// Exporta√ß√£o padr√£o para compatibilidade
export default {
  orcamento: orcamentoApi,
  tesouraria: tesourariaApi,
  auth: authApi,
  httpService,
  authService
};
